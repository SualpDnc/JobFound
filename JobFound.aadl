package JobFound

public
	with mypropertyset;
	with mypropertyset2;
	with mypropertyset3;

	

system UserManagement
	features
		register: out data port;
		login: out data port;
		edit_profile: out data port;
	properties
		mypropertyset3::Role => UserManagement;

end UserManagement;

system jobseeker
	features
		send_req: out data port;
		get_jobinfo: in data port;
		edit_profile: in data port;
		apply_job: out data port;
		contact_details: out data port;
		anonymous_knowledge: in data port;
	properties
		mypropertyset::Role => jobseeker;
	end jobseeker;

system employer
	features
		create_list: out data port;
		get_feedback: in out data port;
		edit_profile: in data port;
		share_position: out data port;
		exchange_knowledge: in out data port;
		exchange_experiences: in out data port;
	properties
		mypropertyset2::Role => employer;
	end employer;

system JobFoundServer extends UserManagement
	features
		get_req: in data port;
		send_info: in out data port;
		get_list: in out data port;
		send_feedback: in data port;
		exchange_knowledge: in out data port;
		exchange_experiences: in out data port;
	properties
		mypropertyset::Role => Server;
		mypropertyset2::Role => Server;
		mypropertyset3::Role => Server;
end JobFoundServer;




system implementation jobFoundServer.Impl
	prototypes
		jobFoundServer_Impl_new_prototype: data;
	subcomponents
		jobseeker1: system jobseeker;
		server1: system JobFoundServer;
		employer1: system employer;
		userManagement1: system UserManagement;
		backupServer1: system Backup_Server;
	connections
		conn1: port userManagement1.register -> server1.get_req;
		conn2: port userManagement1.login -> server1.get_req;
		conn3: port userManagement1.edit_profile -> jobseeker1.edit_profile;
		conn4: port userManagement1.edit_profile -> employer1.edit_profile;
		conn5: port jobseeker1.send_req -> server1.get_req;
		conn6: port server1.send_info -> jobseeker1.get_jobinfo;
		conn7: port jobseeker1.apply_job -> server1.get_req;
		conn8: port jobseeker1.contact_details -> server1.get_req;
		conn9: port employer1.exchange_knowledge -> jobseeker1.anonymous_knowledge;
		conn10: port employer1.exchange_experiences -> jobseeker1.anonymous_knowledge;
		conn11: port employer1.create_list -> server1.get_list;
		conn12: port employer1.get_feedback -> server1.send_feedback;
		conn13: port employer1.share_position -> server1.get_list;
		conn14: port server1.get_list -> employer1.get_feedback;
		conn15: port backupServer1.get_req -> server1.get_req;
		conn16: port backupServer1.send_info -> server1.send_info;
		conn17: port backupServer1.get_list -> server1.get_list;
		conn18: port backupServer1.send_feedback -> server1.send_feedback;
		conn19: port backupServer1.exchange_knowledge -> employer1.exchange_knowledge;
		conn20: port backupServer1.exchange_experiences -> employer1.exchange_experiences;

end jobFoundServer.Impl;

system Backup_Server
	features
		get_req: in out data port;
		send_info: in out data port;
		get_list: in out data port;
		send_feedback: out data port;
		exchange_knowledge: in out data port;
		exchange_experiences: in out data port;
	properties
		mypropertyset::Role => Server;
		mypropertyset2::Role => Server;
end Backup_Server;

end JobFound;

